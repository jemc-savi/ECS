// TODO: Documentation
:struct ECS.World
  :let _ptr _FFI.WorldRef
  :new
    @_ptr = _FFI.ecs_init

  :fun _info: _FFI.ecs_get_world_info(@_ptr)

  // TODO: Documentation
  :fun target_fps: @_info.target_fps
  :fun ref "target_fps="(fps): _FFI.ecs_set_target_fps(@_ptr, fps)

  // TODO: Documentation
  :fun frame_count_total: @_info.frame_count_total

  // TODO: Documentation
  :fun ref quit: _FFI.ecs_quit(@_ptr)
  :fun should_quit: _FFI.ecs_should_quit(@_ptr)

  // TODO: Documentation
  :fun ref progress(delta_time F32 = 0): _FFI.ecs_progress(@_ptr, delta_time)

  // TODO: Documentation
  :fun "[]!"(name String) ECS.Entity
    entity = _FFI.ecs_lookup(@_ptr, name.cstring)
    error! if entity.id.is_zero
    entity

  // TODO: Documentation
  :fun ref entity(name String) ECS.Entity
    desc = _FFI.EntityDesc.new(0, name.cstring)
    _FFI.ecs_entity_init(@_ptr, stack_address_of_variable desc)

  // TODO: Documentation
  :fun ref _component_entity(
    name String
    size USize
    alignment USize
  ) ECS.Entity
    entity_desc = _FFI.EntityDesc.new(
      0 // find or create id
      name.cstring
      CPointer(U8).null // sep
      CPointer(U8).null // root_sep
      CPointer(U8).null // symbol
      True // use_low_id
    )
    entity = _FFI.ecs_entity_init(@_ptr, stack_address_of_variable entity_desc)

    desc = _FFI.ComponentDesc.new(
      entity.id
      size.i32
      alignment.i32
    )
    _FFI.ecs_component_init(@_ptr, stack_address_of_variable desc)
